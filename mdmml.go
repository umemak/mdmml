package mdmml

type MDMML struct {
	Title  string
	header []byte
	Tracks []Track
}

type Track struct {
	Name   string
	String string
	Data   []byte
}

func NewMDMML(src []byte) *MDMML {
	mm := &MDMML{}
	mm.header = []byte{
		0x4D, 0x54, 0x68, 0x64, // "MThd"
		0x00, 0x00, 0x00, 0x06, // Length
		0x00, 0x01, // Format
		0x00, 0x03, // Tracks
		0x03, 0xC0, // Divisions(960)
	}
	return mm
}

func (mm *MDMML) Header() []byte {
	return mm.header
}

func (mm *MDMML) ConductorTrack() []byte {
	return []byte{
		0x4D, 0x54, 0x72, 0x6B, // "MTrk"
		0x00, 0x00, 0x00, 0x17, // Length
		0x00, 0xFF, 0x03, 0x00, // Title
		0x00, 0xFF, 0x51, 0x03, 0x06, 0x8A, 0x1B, // Tempo
		0x00, 0xFF, 0x58, 0x04, 0x04, 0x02, 0x18, 0x08, // 4/4
		0x00, 0xFF, 0x2F, 0x00, // EOT
	}
}

func (mm *MDMML) TrackData(name string) []byte {
	d := []Track{
		{
			Name: "A",
			Data: []byte{
				0x4D, 0x54, 0x72, 0x6B, // "MTrk"
				0x00, 0x00, 0x00, 0x2B, // Length
				0x00, 0xFF, 0x03, 0x00, // Title
				0x00, 0xFF, 0x21, 0x01, 0x00, // port
				0x00, 0xB0, 0x79, 0x00, // CC#121(Reset)
				0x00, 0xB0, 0x00, 0x00, // CC#0(MSB)
				0x00, 0xB0, 0x20, 0x00, // CC#32(LSB)
				0x00, 0xC0, 0x28, // Program Change
				0x00, 0xB0, 0x07, 0x64, // CC#7(Volume)
				0x9E, 0x00, 0x90, 0x3C, 0x64, // Note ON
				0x9E, 0x00, 0x80, 0x3C, 0x00, // Note OFF
				0x9E, 0x00, 0xFF, 0x2F, 0x00, //EOT
			},
		},
		{
			Name: "B",
			Data: []byte{
				0x4D, 0x54, 0x72, 0x6B, // "MTrk"
				0x00, 0x00, 0x00, 0x29, // Length
				0x00, 0xFF, 0x03, 0x00, // Title
				0x00, 0xFF, 0x21, 0x01, 0x00, // port
				0x00, 0xB0, 0x79, 0x00, // CC#121(Reset)
				0x00, 0xB0, 0x00, 0x00, // CC#0(MSB)
				0x00, 0xB0, 0x20, 0x00, // CC#32(LSB)
				0x00, 0xC0, 0x28, // Program Change
				0x00, 0xB0, 0x07, 0x64, // CC#7(Volume)
				0x00, 0x90, 0x3E, 0x64, // Note ON
				0x9E, 0x00, 0x80, 0x3E, 0x00, // Note OFF
				0x00, 0xFF, 0x2F, 0x00, //EOT
			},
		},
	}
	for _, v := range d {
		if v.Name == name {
			return v.Data
		}
	}
	return nil
}

func (mm *MDMML) SMF() []byte {
	// Header
	smf := mm.Header()
	// Conductor Track
	smf = append(smf, mm.ConductorTrack()...)
	// Track Data
	smf = append(smf, mm.TrackData("A")...)
	smf = append(smf, mm.TrackData("B")...)
	return smf
}
